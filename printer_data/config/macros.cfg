## Client variable macro for your printer.cfg
[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True  ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 10.0  ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 10.0  ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 35.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 200.0 ; move speed in mm/s
variable_park_at_cancel   : False ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : 10    ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : 200   ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract   : True  ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 1800  ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
#variable_runout_sensor    : ""   ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
##                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
## !!! Custom macros, please use with care and review the section of the corresponding macro.
## These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
## Only  single line commands are supported, please create a macro if you need more than one command.
#variable_user_pause_macro : "PAUSE"           ; Everything insight the "" will be executed after the klipper base pause (PAUSE_BASE) function
#variable_user_resume_macro: "RESUME"          ; Everything insight the "" will be executed before the klipper base resume (RESUME_BASE) function
#variable_user_cancel_macro: "CANCEL_PRINT"    ; Everything insight the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode:

# used by KlipperScreen
[gcode_macro LOAD_FILAMENT]
variable_load_distance:  60
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state

# used by KlipperScreen
[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(50)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-1 F1000
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro M900]
description = Set Pressure Advance
gcode = 
	SET_PRESSURE_ADVANCE ADVANCE={params.K|default(0)}

[gcode_macro WIPE_LINE]
gcode = 
	{% set Z = params.Z|default(0.45)|float %}
	{% set N = params.N|default(0.8)|float %}
	{% if printer.toolhead.homed_axes != "xyz" %}
	{printer.gcode.action_respond_info("Please home XYZ first")}
	{% elif printer.extruder.temperature < 170 %}
	{printer.gcode.action_respond_info("Extruder temperature too low")}
	{% else %}
	SAVE_GCODE_STATE NAME=WIPE_LINE_state
	M82
	G90
	G92 E0
	G1 X5 Y80 Z5 F3000
	G1 Z{Z} F3000
	G1 X5 Y200 F1500 E10.83
	G1 X{ N|float + 10.0 } F5000
	G1 Y82 F1500 E21.5
	G1 Y80 F5000
	RESTORE_GCODE_STATE NAME=WIPE_LINE_state
	{% endif %}

[gcode_macro START_PRINT]
gcode = 
	{% set BED_TEMP = params.BED_TEMP|default(110)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)|float %}
	M140 S{BED_TEMP}
	M104 S{EXTRUDER_TEMP}
	SET_GCODE_OFFSET Z=0.0
	BED_MESH_PROFILE LOAD=default
	G28 X
	G28 Y
	G28 Z
	Z_TILT_ADJUST
	G1 Z15.0 F6000
    M106 P3 S255
    #SET_FAN_SPEED FAN=fan3 SPEED=1
	M190 S{BED_TEMP}
	M109 S{EXTRUDER_TEMP}
    #BED_MESH_CALIBRATE ADAPTIVE=1
	G28 Z
	G90
	LINE_PURGE
	G1 Z10 F3000

[gcode_macro END_PRINT]
gcode = 
	M140 S0
	M104 S0
	M106 S0
    M106 P3 S0
    G91
	G1 X-2 Y-2 E-3 F300
	G1 Z50 F3000
	G90
	M84
    SET_FAN_SPEED FAN=fan3 SPEED=0
	WLED_ON STRIP=Fragezeichen PRESET=12

[gcode_macro WLED_ON]
description = Turn WLED strip on using optional preset and resets led colors
gcode = 
	{% set strip = params.STRIP|default("Fragezeichen")|string %}
	{% set preset = params.PRESET|default(12)|int %}
	
	{action_call_remote_method("set_wled_state",
	strip=strip,
	state=True,
	preset=preset)}

[gcode_macro WLED_OFF]
description = Turn WLED strip off
gcode = 
	{% set strip = params.STRIP|default("Fragezeichen")|string %}
	{% set preset = params.PRESET|default(6)|int %}
	
	{action_call_remote_method("set_wled_state",
	strip=strip,
	state=True,
	preset=preset)}

[gcode_macro SCREW_ADJUST]
gcode = 
	SCREWS_TILT_CALCULATE

[gcode_macro MOTORS_OFF]
gcode = 
	M84

[gcode_macro QUERY_BME280]
gcode = 
	{% set sensor = printer["bme280ambient"] %}
	{action_respond_info(
	"Temperature: %.2f C\n"
	"Pressure: %.2f hPa\n"
	"Humidity: %.2f%%" % (
	sensor.temperature,
	sensor.pressure,
	sensor.humidity))}

[gcode_macro Licht_An]
gcode=
    SET_LED LED=Licht WHITE=1
[gcode_macro Licht_Aus]
gcode=
    SET_LED LED=Licht WHITE=0
#[delayed_gcode Beleuchtung]
#initial_duration: 1
#gcode:
#    SET_LED LED=Licht WHITE=1

[gcode_macro _Beleuchtung]
# The variable below should be initialized to the startup value.  If your
# device is configured to be on at startup use "variable_value: 1"
variable_value: 1
gcode:
  {% if 'VALUE' not in params %}
    {action_raise_error("Parameter 'VALUE' missing from 'Beleuchtung'")}
  {% endif %}
  {% set state = params.VALUE|int %}
  {% if state %}
    # turn the neopixel on
    SET_LED LED=Licht White=1
  {% else %}
    # turn the neopixel off
    SET_LED LED=Licht White=0
  {% endif %}
  # Update the state of our variable.  This will inform Moonraker that
  # the device has changed its state.
  SET_GCODE_VARIABLE MACRO=Beleuchtung VARIABLE=value value={state}    


# Exhaust Filter on and off via gcode commands M106 and M107
#[gcode_macro M106]
#rename_existing: M106.1
#gcode:
#    {% if params.P is defined %}
#      {% if params.S is defined %}
#        SET_FAN_SPEED FAN={params.P|int} Speed={params.S|int}
#        #SET_PIN PIN=fan{params.P|int} VALUE={params.S|int}
#      {% else %}
#        SET_FAN_SPEED FAN={params.P|int} Speed={params.S|int}
#        #SET_PIN PIN=fan{params.P|int} VALUE=255
#      {% endif %}
#    {% else %}
#      {% if params.S is defined %}
#        SET_FAN_SPEED FAN=0 Speed={params.S|int}
#        #SET_PIN PIN=fan0 VALUE={params.S|int}
#      {% else %}
#        SET_FAN_SPEED FAN=0 Speed=255
#        #SET_PIN PIN=fan0 VALUE=255        
#      {% endif %}
#    {% endif %}
#
#[gcode_macro M107]
#rename_existing: M107.1
#gcode:
#    {% if params.P is defined %}
#      SET_FAN_SPEED FAN={params.P|int} Speed=0
#      #SET_PIN PIN=fan{params.P|int} VALUE=0      
#    {% else %}
#      SET_FAN_SPEED FAN=0 Speed=0
#      #SET_PIN PIN=0 VALUE=0
#    {% endif %}



# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED  

[gcode_macro M17]
gcode:    
    {% if 'X' in params %}
        SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1
        SET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1
    {% endif %}
    {% if 'Y' in params %}
        SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1
        SET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1
    {% endif %}
    {% if 'Z' in params %}
        SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=1
    {% endif %}
    {% if 'E' in params %}
        SET_STEPPER_ENABLE STEPPER=extruder ENABLE=1
    {% endif %}    
    {% if   not 'X' in params 
        and not 'Y' in params
        and not 'Z' in params
        and not 'E' in params %}            
        SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1
        SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1
        SET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1
        SET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1
        SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=1
        SET_STEPPER_ENABLE STEPPER=extruder ENABLE=1
    {% endif %}   
    